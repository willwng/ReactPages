{"ast":null,"code":"var _jsxFileName = \"/home/will/Documents/Cloudflare/general/pages/src/components/posts.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"@reach/router\";\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport { useForm } from \"react-hook-form\";\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Modal from 'react-bootstrap/Modal';\nimport NavBar from './navbar.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Posts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const getPosts = async () => {\n      const resp = await fetch(\"https://serverless-api.wyw6.workers.dev/api/posts\");\n      const postsResp = await resp.json();\n      setPosts(postsResp);\n    };\n\n    getPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"p-3\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"p-5 mb-4 bg-light rounded-3\",\n        children: /*#__PURE__*/_jsxDEV(PostCard, {\n          posts: posts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n/**\n * @param {*} param0: json of post data \n * @returns A collection of toasts with posts\n */\n\n\n_s(Posts, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = Posts;\n\nconst PostCard = _ref => {\n  let {\n    posts\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Row, {\n    xs: 1,\n    md: 3,\n    className: \"g-4\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          borderRadius: \"20px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/posts/${post.id}`,\n              style: {\n                color: \"black\",\n                textDecoration: \"none\"\n              },\n              className: \"me-auto\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [post.text, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"text-muted\",\n              children: [daysFromToday(post.published_at), \" days ago\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n/**\n * @returns A modal form for submitting thoughts\n */\n\n\n_c2 = PostCard;\n\nconst ModalForm = () => {\n  _s2();\n\n  const [show, setShow] = useState(true);\n\n  const handleClose = () => setShow(false);\n\n  const {\n    register,\n    handleSubmit\n  } = useForm(); // Submit button handling\n\n  const onSubmit = data => {\n    setShow(false);\n    document.getElementById(\"postForm\").reset();\n    createPost(data.title, data.text);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Share a Thought!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"postForm\",\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"title\"),\n          placeholder: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"text\"),\n          placeholder: \"My Thoughts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Share\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n/**\n * @param {*} posted Date of post (string)\n * @returns Numbers of days since posted\n */\n\n\n_s2(ModalForm, \"KFwn5ZorYR82evun6TT3X8A4Tpo=\", false, function () {\n  return [useForm];\n});\n\n_c3 = ModalForm;\n\nfunction daysFromToday(posted) {\n  var today = new Date();\n  var parsed = new Date(posted);\n  var time_difference = new Date(today - parsed);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: time_difference.getDay()\n  }, void 0, false);\n}\n/**\n * @returns Randomly generated ID\n */\n\n\nfunction randomID() {\n  const max_id = 2 ** 10;\n  return Math.floor(Math.random() * max_id);\n}\n/**\n * Creates a post request based on input of title and text\n * @param title Title of post (string)\n * @param text Text of post (string)\n */\n\n\nfunction createPost(title, text) {\n  // Empty title and text aren't allowed\n  if (!title) {\n    title = \"I forgot to make a title :(\";\n  }\n\n  if (!text) {\n    text = \"I am at a loss for words\";\n  } // Randomly generate id and get the date\n\n\n  const body = JSON.stringify({\n    id: randomID(),\n    title: title,\n    text: text,\n    published_at: new Date().toString()\n  }); // Post request!\n\n  fetch(\"https://serverless-api.wyw6.workers.dev/api/posts\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: body\n  });\n}\n\nexport default Posts;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Posts\");\n$RefreshReg$(_c2, \"PostCard\");\n$RefreshReg$(_c3, \"ModalForm\");","map":{"version":3,"sources":["/home/will/Documents/Cloudflare/general/pages/src/components/posts.js"],"names":["React","useEffect","useState","Link","Container","Button","useForm","Card","Col","Row","Modal","NavBar","Posts","posts","setPosts","getPosts","resp","fetch","postsResp","json","textAlign","PostCard","map","post","borderRadius","id","color","textDecoration","title","text","daysFromToday","published_at","ModalForm","show","setShow","handleClose","register","handleSubmit","onSubmit","data","document","getElementById","reset","createPost","posted","today","Date","parsed","time_difference","getDay","randomID","max_id","Math","floor","random","body","JSON","stringify","toString","method","headers"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"@reach/router\";\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport { useForm } from \"react-hook-form\";\nimport Card from 'react-bootstrap/Card'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Modal from 'react-bootstrap/Modal'\n\nimport NavBar from './navbar.js'\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const getPosts = async () => {\n      const resp = await fetch(\n        \"https://serverless-api.wyw6.workers.dev/api/posts\"\n      );\n      const postsResp = await resp.json();\n      setPosts(postsResp);\n    };\n    getPosts();\n  }, []);\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <NavBar></NavBar>\n      <Container className=\"p-3\">\n        <Container className=\"p-5 mb-4 bg-light rounded-3\">\n          <PostCard posts={posts}>\n          </PostCard>\n        </Container>\n      </Container>\n    </div>\n  );\n};\n\n\n\n/**\n * @param {*} param0: json of post data \n * @returns A collection of toasts with posts\n */\nconst PostCard = ({ posts }) => {\n  return (\n    <Row xs={1} md={3} className=\"g-4\">\n      {posts.map((post) => (\n        <Col key={post.id} >\n          <Card style={{ borderRadius: \"20px\" }}>\n            <Card.Body>\n              <Card.Title>\n                <Link to={`/posts/${post.id}`}\n                  style={{ color: \"black\", textDecoration: \"none\" }}\n                  className=\"me-auto\">{post.title}\n                </Link>\n              </Card.Title>\n              <Card.Text>\n                {post.text}\n                <br></br>\n                <small className=\"text-muted\">\n                  {daysFromToday(post.published_at)} days ago\n                </small>\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\n\n/**\n * @returns A modal form for submitting thoughts\n */\nconst ModalForm = () => {\n  const [show, setShow] = useState(true);\n  const handleClose = () => setShow(false);\n  const { register, handleSubmit } = useForm();\n  // Submit button handling\n  const onSubmit = (data) => {\n    setShow(false);\n    document.getElementById(\"postForm\").reset();\n    createPost(data.title, data.text);\n  }\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Share a Thought!</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <form id=\"postForm\" onSubmit={handleSubmit(onSubmit)}>\n          <input {...register(\"title\")} placeholder=\"Title\" />\n          <input {...register(\"text\")} placeholder=\"My Thoughts\" />\n          <Button type=\"submit\" variant=\"primary\">\n            Share\n            </Button>\n        </form>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\n/**\n * @param {*} posted Date of post (string)\n * @returns Numbers of days since posted\n */\nfunction daysFromToday(posted) {\n  var today = new Date()\n  var parsed = new Date(posted);\n  var time_difference = new Date(today - parsed);\n  return (\n    <>\n      {time_difference.getDay()}\n    </>);\n}\n\n/**\n * @returns Randomly generated ID\n */\nfunction randomID() {\n  const max_id = 2 ** 10;\n  return Math.floor(Math.random() * max_id);\n}\n\n/**\n * Creates a post request based on input of title and text\n * @param title Title of post (string)\n * @param text Text of post (string)\n */\nfunction createPost(title, text) {\n  // Empty title and text aren't allowed\n  if (!title) {\n    title = \"I forgot to make a title :(\"\n  }\n  if (!text) {\n    text = \"I am at a loss for words\"\n  }\n  // Randomly generate id and get the date\n  const body = JSON.stringify({ id: randomID(), title: title, text: text, published_at: (new Date()).toString() })\n  // Post request!\n  fetch(\"https://serverless-api.wyw6.workers.dev/api/posts\", {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', },\n    body: body\n  });\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}