{"ast":null,"code":"var _jsxFileName = \"/home/will/Documents/Cloudflare/general/pages/src/components/posts.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"@reach/router\";\nimport Toast from 'react-bootstrap/Toast';\nimport ToastContainer from 'react-bootstrap/ToastContainer';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Posts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const getPosts = async () => {\n      const resp = await fetch(\"https://serverless-api.wyw6.workers.dev/api/posts\");\n      const postsResp = await resp.json();\n      setPosts(postsResp);\n    };\n\n    getPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dalio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreatePost, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"p-3\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"p-5 mb-4 bg-light rounded-3\",\n        children: /*#__PURE__*/_jsxDEV(ExampleToast, {\n          posts: posts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n/**\n * @param {*} param0: json of post data \n * @returns A collection of toasts with posts\n */\n\n\n_s(Posts, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = Posts;\n\nconst ExampleToast = _ref => {\n  let {\n    posts\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(ToastContainer, {\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(Toast, {\n      children: [/*#__PURE__*/_jsxDEV(Toast.Header, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"me-auto\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"text-muted\",\n          children: [daysFromToday(post.published_at), \" days ago \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Toast.Body, {\n        children: post.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n/**\n * @returns Button that can show a form\n */\n\n\n_c2 = ExampleToast;\n\nconst CreatePost = () => {\n  _s2();\n\n  const [showForm, showFormSet] = useState(false);\n\n  const onClick = () => {\n    showFormSet(true ^ showForm);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"success\",\n      className: \"mr-1\",\n      onClick: onClick,\n      children: \"Share a new thought\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), showForm ? /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 20\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n/**\n * @returns Form for submitting thoughts\n */\n\n\n_s2(CreatePost, \"p6Kf6djNnubfjP6BREep9Ps8LVw=\");\n\n_c3 = CreatePost;\n\nconst PostForm = () => {\n  _s3();\n\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n\n  const onSubmit = data => createPost(data.title, data.text);\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"title\"),\n      placeholder: \"Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"text\"),\n      placeholder: \"My Thoughts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      variant: \"secondary\",\n      size: \"sm\",\n      children: \"Share\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n/**\n * @param {*} posted Date of post (string)\n * @returns Numbers of days since posted\n */\n\n\n_s3(PostForm, \"zkd3JmxRK/AmyiWtSfciHeYO5Zk=\", false, function () {\n  return [useForm];\n});\n\n_c4 = PostForm;\n\nfunction daysFromToday(posted) {\n  var today = Date.now();\n  var parsed = Date.parse(posted);\n  var time_difference = new Date(today - parsed);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: time_difference.getDay()\n  }, void 0, false);\n}\n/**\n * @returns Randomly generated ID\n */\n\n\nfunction randomID() {\n  const max_id = 2 ** 10;\n  return Math.floor(Math.random() * max_id);\n}\n/**\n * Creates a post request based on input of title and text\n * @param title Title of post (string)\n * @param text Text of post (string)\n */\n\n\nfunction createPost(title, text) {\n  // Empty title and text aren't allowed\n  if (!title) {\n    title = \"I forgot to make a title :(\";\n  }\n\n  if (!text) {\n    text = \"I am at a loss for words\";\n  } // Randomly generate id and get the date\n\n\n  const body = JSON.stringify({\n    id: randomID(),\n    title: title,\n    text: text,\n    published_at: Date.now().toString()\n  }); // Post request!\n\n  fetch(\"https://serverless-api.wyw6.workers.dev/api/posts\", {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: body\n  });\n}\n\nexport default Posts;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Posts\");\n$RefreshReg$(_c2, \"ExampleToast\");\n$RefreshReg$(_c3, \"CreatePost\");\n$RefreshReg$(_c4, \"PostForm\");","map":{"version":3,"sources":["/home/will/Documents/Cloudflare/general/pages/src/components/posts.js"],"names":["React","useEffect","useState","Link","Toast","ToastContainer","Container","Button","useForm","Posts","posts","setPosts","getPosts","resp","fetch","postsResp","json","textAlign","ExampleToast","map","post","title","daysFromToday","published_at","text","id","CreatePost","showForm","showFormSet","onClick","PostForm","register","handleSubmit","onSubmit","data","createPost","posted","today","Date","now","parsed","parse","time_difference","getDay","randomID","max_id","Math","floor","random","body","JSON","stringify","toString","method","headers"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,QAAQ,GAAG,YAAY;AAC3B,YAAMC,IAAI,GAAG,MAAMC,KAAK,CACtB,mDADsB,CAAxB;AAGA,YAAMC,SAAS,GAAG,MAAMF,IAAI,CAACG,IAAL,EAAxB;AACAL,MAAAA,QAAQ,CAACI,SAAD,CAAR;AACD,KAND;;AAQAH,IAAAA,QAAQ;AACT,GAVQ,EAUN,EAVM,CAAT;AAWA,sBAEE;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,6BAArB;AAAA,+BACE,QAAC,YAAD;AAAc,UAAA,KAAK,EAAEP;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAcD,CA5BD;AA8BA;AACA;AACA;AACA;;;GAjCMD,K;;KAAAA,K;;AAkCN,MAAMS,YAAY,GAAG,QAAe;AAAA,MAAd;AAAER,IAAAA;AAAF,GAAc;AAClC,sBACE,QAAC,cAAD;AAAA,cACGA,KAAK,CAACS,GAAN,CAAWC,IAAD,iBACT,QAAC,KAAD;AAAA,8BACE,QAAC,KAAD,CAAO,MAAP;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,SAAlB;AAAA,oBAA6BA,IAAI,CAACC;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,SAAS,EAAC,YAAjB;AAAA,qBAA+BC,aAAa,CAACF,IAAI,CAACG,YAAN,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,KAAD,CAAO,IAAP;AAAA,kBAAaH,IAAI,CAACI;AAAlB;AAAA;AAAA;AAAA;AAAA,cALF;AAAA,OAAYJ,IAAI,CAACK,EAAjB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAbD;AAeA;AACA;AACA;;;MAjBMP,Y;;AAkBN,MAAMQ,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,CAAC,KAAD,CAAxC;;AACA,QAAM2B,OAAO,GAAG,MAAM;AAAED,IAAAA,WAAW,CAAC,OAAOD,QAAR,CAAX;AAA8B,GAAtD;;AACA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,SAAS,EAAC,MAApC;AAA2C,MAAA,OAAO,EAAEE,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAIIF,QAAQ,gBAAG,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAkB,IAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAXD;AAaA;AACA;AACA;;;IAfMD,U;;MAAAA,U;;AAgBN,MAAMI,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA6BxB,OAAO,EAA1C;;AACA,QAAMyB,QAAQ,GAAIC,IAAD,IAAUC,UAAU,CAACD,IAAI,CAACb,KAAN,EAAaa,IAAI,CAACV,IAAlB,CAArC;;AACA,sBACE;AAAM,IAAA,QAAQ,EAAEQ,YAAY,CAACC,QAAD,CAA5B;AAAA,4BACE,sBAAWF,QAAQ,CAAC,OAAD,CAAnB;AAA8B,MAAA,WAAW,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,sBAAWA,QAAQ,CAAC,MAAD,CAAnB;AAA6B,MAAA,WAAW,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAC,WAA9B;AAA0C,MAAA,IAAI,EAAC,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAZD;AAcA;AACA;AACA;AACA;;;IAjBMD,Q;UAC+BtB,O;;;MAD/BsB,Q;;AAkBN,SAASR,aAAT,CAAuBc,MAAvB,EAA+B;AAC7B,MAAIC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAZ;AACA,MAAIC,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAWL,MAAX,CAAb;AACA,MAAIM,eAAe,GAAG,IAAIJ,IAAJ,CAASD,KAAK,GAAGG,MAAjB,CAAtB;AACA,sBACE;AAAA,cACGE,eAAe,CAACC,MAAhB;AADH,mBADF;AAID;AAED;AACA;AACA;;;AACA,SAASC,QAAT,GAAoB;AAClB,QAAMC,MAAM,GAAG,KAAK,EAApB;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,MAA3B,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASV,UAAT,CAAoBd,KAApB,EAA2BG,IAA3B,EAAiC;AAC/B;AACA,MAAI,CAACH,KAAL,EAAY;AACVA,IAAAA,KAAK,GAAG,6BAAR;AACD;;AACD,MAAI,CAACG,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAG,0BAAP;AACD,GAP8B,CAQ/B;;;AACA,QAAMyB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAE1B,IAAAA,EAAE,EAAEmB,QAAQ,EAAd;AAAkBvB,IAAAA,KAAK,EAAEA,KAAzB;AAAgCG,IAAAA,IAAI,EAAEA,IAAtC;AAA4CD,IAAAA,YAAY,EAAEe,IAAI,CAACC,GAAL,GAAWa,QAAX;AAA1D,GAAf,CAAb,CAT+B,CAU/B;;AACAtC,EAAAA,KAAK,CAAC,mDAAD,EAAsD;AACzDuC,IAAAA,MAAM,EAAE,MADiD;AAEzDC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,qCAA+B;AAHxB,KAFgD;AAOzDL,IAAAA,IAAI,EAAEA;AAPmD,GAAtD,CAAL;AASD;;AAED,eAAexC,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"@reach/router\";\nimport Toast from 'react-bootstrap/Toast';\nimport ToastContainer from 'react-bootstrap/ToastContainer'\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport { useForm } from \"react-hook-form\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    const getPosts = async () => {\n      const resp = await fetch(\n        \"https://serverless-api.wyw6.workers.dev/api/posts\"\n      );\n      const postsResp = await resp.json();\n      setPosts(postsResp);\n    };\n\n    getPosts();\n  }, []);\n  return (\n\n    <div style={{ textAlign: \"center\" }}>\n      <h1>Dalio</h1>\n      <CreatePost></CreatePost>\n\n      <Container className=\"p-3\">\n        <Container className=\"p-5 mb-4 bg-light rounded-3\">\n          <ExampleToast posts={posts}>\n          </ExampleToast>\n        </Container>\n      </Container>\n    </div>\n  );\n};\n\n/**\n * @param {*} param0: json of post data \n * @returns A collection of toasts with posts\n */\nconst ExampleToast = ({ posts }) => {\n  return (\n    <ToastContainer>\n      {posts.map((post) => (\n        <Toast key={post.id}>\n          <Toast.Header>\n            <strong className=\"me-auto\">{post.title}</strong>\n            <small className=\"text-muted\">{daysFromToday(post.published_at)} days ago </small>\n          </Toast.Header>\n          <Toast.Body>{post.text}</Toast.Body>\n        </Toast>))}\n    </ToastContainer>\n  );\n};\n\n/**\n * @returns Button that can show a form\n */\nconst CreatePost = () => {\n  const [showForm, showFormSet] = useState(false);\n  const onClick = () => { showFormSet(true ^ showForm) }\n  return (\n    <div>\n      <Button variant=\"success\" className=\"mr-1\" onClick={onClick}>\n        Share a new thought\n      </Button>\n      { showForm ? <PostForm /> : null}\n    </div>\n  );\n}\n\n/**\n * @returns Form for submitting thoughts\n */\nconst PostForm = () => {\n  const { register, handleSubmit } = useForm();\n  const onSubmit = (data) => createPost(data.title, data.text);\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"title\")} placeholder=\"Title\" />\n      <input {...register(\"text\")} placeholder=\"My Thoughts\" />\n      <Button type=\"submit\" variant=\"secondary\" size=\"sm\">\n        Share\n      </Button>\n    </form>\n  );\n}\n\n/**\n * @param {*} posted Date of post (string)\n * @returns Numbers of days since posted\n */\nfunction daysFromToday(posted) {\n  var today = Date.now();\n  var parsed = Date.parse(posted);\n  var time_difference = new Date(today - parsed);\n  return (\n    <>\n      {time_difference.getDay()}\n    </>);\n}\n\n/**\n * @returns Randomly generated ID\n */\nfunction randomID() {\n  const max_id = 2 ** 10;\n  return Math.floor(Math.random() * max_id);\n}\n\n/**\n * Creates a post request based on input of title and text\n * @param title Title of post (string)\n * @param text Text of post (string)\n */\nfunction createPost(title, text) {\n  // Empty title and text aren't allowed\n  if (!title) {\n    title = \"I forgot to make a title :(\"\n  }\n  if (!text) {\n    text = \"I am at a loss for words\"\n  }\n  // Randomly generate id and get the date\n  const body = JSON.stringify({ id: randomID(), title: title, text: text, published_at: Date.now().toString() })\n  // Post request!\n  fetch(\"https://serverless-api.wyw6.workers.dev/api/posts\", {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: body\n  })\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}